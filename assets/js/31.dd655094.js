(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{297:function(t,s,a){"use strict";a.r(s);var v=a(13),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"应知应会的jvm相关知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应知应会的jvm相关知识"}},[t._v("#")]),t._v(" 应知应会的JVM相关知识")]),t._v(" "),a("p",[t._v('"一次编译、到处运行" 说的是Java语言跨平台的特性， Java的跨平台特性与Java虚拟机的存在密不可分，可在不同的环境中运行。比如说Windows平台和Linux平台都有相应的JDK，安装好JDK后也就有了Java语言的运行环境。其实Java语言本身与其他的编程语言没有特别大的差异，并不是说Java语言可以跨平台，而是在不同的平台都有可以让Java语言运行的环境而已，所以才有了Java一次编译，到处运行这样的效果。 严格的讲，跨平台的语言不止Java一种，但Java是较为成熟的一种。')]),t._v(" "),a("h3",{attrs:{id:"_1、解释还是编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、解释还是编译"}},[t._v("#")]),t._v(" 1、解释还是编译")]),t._v(" "),a("p",[t._v("我们经常听说一门语言是解释型还是编译型的语言，那么java呢？。")]),t._v(" "),a("ul",[a("li",[t._v("解释型：代码没有编译的过程，读一行执行一行，比如我们以后要学习的javascreipt。")]),t._v(" "),a("li",[t._v("编译型：运行之前需要将代码先编译成【机器指令】，再运行，比如c语言。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("我们都知道java是存在编译过程的，但是java的编译和c语言不一样，java不是编译成具体的【机器指令】，因为不同的硬件结构和操作系统有不同的机器指令，java为了实现【一次编写、随处运行】的目标，实际上编译出的指令是【字节码】，字节码只能由jvm识别，我们的硬件是无法识别的，运行的过程却是由jvm使用解释的方式执行。")]),t._v(" "),a("p",[t._v("但是为了提升效率，jvm推出了JIT（Just In Time Compile 即时编译器），就是在运行过程中，能将部分热点代码，直接编译成机器码，加快执行效率。甚至在java9中提出了AOT编译器（Ahead Of Time，指运行前编译）。")]),t._v(" "),a("p",[t._v("所以到目前为止，在 JVM 中有三个非常重要的编译器，它们分别是：前端编译器、JIT 编译器、AOT 编译器。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("前端编译器，最常见的就是我们的 javac 编译器，其将 Java 源代码编译为 Java 字节码文件。")])]),t._v(" "),a("li",[a("p",[t._v("JIT 即时编译器，最常见的是 HotSpot 虚拟机中的 Client Compiler 和 Server Compiler，其将 Java 字节码编译为本地机器代码。")])]),t._v(" "),a("li",[a("p",[t._v("AOT 编译器则能将源代码直接编译为本地机器码。")])]),t._v(" "),a("li",[a("p",[t._v("JIT：吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。")])]),t._v(" "),a("li",[a("p",[t._v("AOT：内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化。")]),t._v(" "),a("p",[t._v("而在 JVM 中，通过这几种不同方式的配合，使得 JVM 的编译质量和运行速度达到最优的状态。")])])]),t._v(" "),a("h3",{attrs:{id:"_2、动态类型还是静态类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、动态类型还是静态类型"}},[t._v("#")]),t._v(" 2、动态类型还是静态类型")]),t._v(" "),a("ul",[a("li",[t._v("静态类型语言：变量定义时有类型声明的语言。")])]),t._v(" "),a("p",[t._v("（1）变量的类型在编译的时候确定")]),t._v(" "),a("p",[t._v("（2）变量的类型在运行时不能修改")]),t._v(" "),a("p",[t._v("这样编译器就可以确定运行时需要的内存总量。 例如：C、Scala、Java、F#语言是静态类型语言。")]),t._v(" "),a("ul",[a("li",[t._v("动态类型语言：变量定义时无类型声明的语言。")])]),t._v(" "),a("p",[t._v("（1）变量的类型在运行的时候确定")]),t._v(" "),a("p",[t._v("（2）变量的类型在运行可以修改")]),t._v(" "),a("p",[t._v("例如：python、Javascript、Ruby语言是动态类型语言。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("强类型定义语言：一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。强类型定义语言是类型安全的语言。")]),t._v(" "),a("li",[t._v("弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。")])]),t._v(" "),a("p",[t._v("java是一门静态的强类型语言。")]),t._v(" "),a("h3",{attrs:{id:"_3、实例对象的内存分布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、实例对象的内存分布"}},[t._v("#")]),t._v(" 3、实例对象的内存分布")]),t._v(" "),a("p",[t._v("先玩一点高级的，先探明一个类的实例对象在内存是什么样子的")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210824103408501.a88b8e38.png",alt:"image-20210824103408501"}})]),t._v(" "),a("p",[a("strong",[t._v("1、（Mark Word）标记位")])]),t._v(" "),a("p",[t._v("这里边记录了一些描述对象的信息，目前先不用理解。")]),t._v(" "),a("p",[a("strong",[t._v("2、指向类的指针")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 该指针在32位JVM中的长度是32bit，在64位JVM中长度是64bit。jvm中默认开启指针压缩，就是32位。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Java对象的类数据保存在方法区，我们一定要知道，实例对象是实例对象，类是类，实例对象是根据类new出来的，而这个类保存在方法区。")]),t._v(" "),a("p",[a("strong",[t._v("3、数组长度")])]),t._v(" "),a("p",[t._v("只有数组对象保存了这部分数据，该数据在32位和64位JVM中长度都是32bit。从这个角度我们也能明白一个数组最长是多长了。")]),t._v(" "),a("p",[a("strong",[t._v("4、实例数据")]),t._v(" 对象的实例数据就是成员变量的值，可能是基础数据类型的值可能是引用。")]),t._v(" "),a("p",[a("strong",[t._v("5、对齐填充字节")])]),t._v(" "),a("p",[t._v("因为JVM要求java的对象占的内存大小应该是8bit的倍数，所以后面有几个字节用于把对象的大小补齐至8bit的倍数，没有特别的功能。")]),t._v(" "),a("p",[t._v("【一个对象在new之前就能确定大小吗？】")]),t._v(" "),a("p",[t._v("因为对象头是确定的，具体的字段也是确定的，所以我们在new一个对象的时候，就已经知道了一个对象具体占用多大的空间。")]),t._v(" "),a("p",[t._v("一个对象一旦被new出来，每个成员变量所占用的空间就已经正确的分配成功了，空间一旦有了，默认值也就有了。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" objectSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectSizeCalculator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objectSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n结果"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("byte\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("计算过程：8字节（对象头）+ 指针4字节 + 实例数据 0 + 8字节对齐 4字节 = 16byte")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectSizeCalculator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br")])]),a("p",[t._v("内存分配：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210824152125280.c912aef7.png",alt:"image-20210824152125280"}})]),t._v(" "),a("p",[t._v("计算结果：")]),t._v(" "),a("p",[t._v("这个其实要计算两部分：")]),t._v(" "),a("ul",[a("li",[t._v("对于Test 8（对象头）+4（Klass）+ 4 (bytes的引用) + 4（int值） = 20 + 对齐 = 24字节")]),t._v(" "),a("li",[t._v("对于byte数组 8（对象头）+4（Klass） + 4（数组长度） + 12（具体的数据）= 32字节")])]),t._v(" "),a("p",[t._v("总的Test的大小就是 24+32 = 56字节")]),t._v(" "),a("h3",{attrs:{id:"_4、类的加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、类的加载"}},[t._v("#")]),t._v(" 4、类的加载")]),t._v(" "),a("p",[t._v("一个类，经过编译后要形成字节码文件，然后jvm需要在【第一次主动使用这个类】的时候将这个类加载到内存的方法区。")]),t._v(" "),a("p",[t._v("现在我们就能了解第一次主动使用了：")]),t._v(" "),a("p",[t._v("1、new对象是不是，包括new自己和new子类都是。")]),t._v(" "),a("p",[t._v("2、调用静态方法和静态属性是不是，包含main方法的也是。")]),t._v(" "),a("p",[t._v("3、一会会学，反射也可以触发类的加载。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210805141759239.e917bf69.png",alt:"image-20210805141759239"}})]),t._v(" "),a("h4",{attrs:{id:"_1-加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载"}},[t._v("#")]),t._v(" （1）加载")]),t._v(" "),a("ol",[a("li",[t._v("通过全限定类名来获取定义此类的二进制字节流。")]),t._v(" "),a("li",[t._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。")]),t._v(" "),a("li",[t._v("在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。")])]),t._v(" "),a("h4",{attrs:{id:"_2-验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-验证"}},[t._v("#")]),t._v(" （2）验证")]),t._v(" "),a("ol",[a("li",[t._v("验证是连接阶段的第一步，这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。")]),t._v(" "),a("li",[t._v("文件格式验证：如是否以魔数 0xCAFEBABE 开头、主、次版本号是否在当前虚拟机处理范围之内、常量合理性验证等。")]),t._v(" "),a("li",[t._v("此阶段保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个 Java类型信息的要求。")]),t._v(" "),a("li",[t._v("元数据验证：是否存在父类，父类的继承链是否正确，抽象类是否实现了其父类或接口之中要求实现的所有方法，字段、方法是否与父类产生矛盾等。")]),t._v(" "),a("li",[t._v("第二阶段，保证不存在不符合 Java 语言规范的元数据信息。")]),t._v(" "),a("li",[t._v("字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。例如保证跳转指令不会跳转到方法体以外的字节码指令上。")]),t._v(" "),a("li",[t._v("符号引用验证：在解析阶段中发生，保证可以将符号引用转化为直接引用。")])]),t._v(" "),a("h4",{attrs:{id:"_3-准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-准备"}},[t._v("#")]),t._v(" （3）准备")]),t._v(" "),a("ol",[a("li",[t._v("为静态变量分配内存并设置类变量初始值，这些变量所使用的内存都将在方法区中进行分配。")])]),t._v(" "),a("h4",{attrs:{id:"_4-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-解析"}},[t._v("#")]),t._v(" （4）解析")]),t._v(" "),a("ol",[a("li",[t._v("虚拟机将常量池内的符号引用替换为直接引用的过程。")]),t._v(" "),a("li",[t._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行。")])]),t._v(" "),a("h4",{attrs:{id:"_5-初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-初始化"}},[t._v("#")]),t._v(" （5）初始化")]),t._v(" "),a("p",[t._v("到初始化阶段，才真正开始执行编译的指令阶段，此阶段是执行 "),a("code",[t._v("<clinit>()")]),t._v(" 方法的过程。"),a("code",[t._v("<clinit>()")]),t._v(" 方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句合并产生的。（不包括构造器中的语句。构造器是初始化对象的，类加载完成后，创建对象时候将调用的 "),a("code",[t._v("<init>()")]),t._v(" 方法来初始化对象）")]),t._v(" "),a("p",[t._v("静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问，如下程序：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给变量赋值可以正常编译通过")]),t._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 这句编译器会提示"非法向前引用"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("以上这 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用，例如：")]),t._v(" "),a("ol",[a("li",[t._v("通过子类引用父类的静态字段，不会导致子类初始化。")]),t._v(" "),a("li",[t._v("通过数组定义来引用类，不会触发此类的初始化。"),a("code",[t._v("MyClass[] cs = new MyClass[10];")])]),t._v(" "),a("li",[t._v("常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。")])]),t._v(" "),a("p",[t._v("【总结：new一个对象过程中发生了什么？】")]),t._v(" "),a("ol",[a("li",[t._v("**确认类元信息是否存在。**当 JVM 接收到 new 指令时，首先在 metaspace 内检查需要创建的类元信息是否存在。 若不存在，那么在双亲委派模式下，使用当前类加载器以 ClassLoader + 包名＋类名为 Key 进行查找对应的 class 文件。 如果没有找到文件，则抛出 ClassNotFoundException 异常 ， 如果找到，则进行类加载（加载 - 验证 - 准备 - 解析 - 初始化），并生成对应的 Class 类对象。")]),t._v(" "),a("li",[a("strong",[t._v("分配对象内存。")]),t._v(" 首先计算对象占用空间大小，如果实例成员变量是引用变量，仅分配引用变量空间即可，即 4 个字节大小，接着在堆中划分—块内存给新对象。")]),t._v(" "),a("li",[a("strong",[t._v("设定默认值。")]),t._v(" 成员变量值都需要设定为默认值， 即各种不同形式的零值。")]),t._v(" "),a("li",[t._v("**设置对象头。**设置新对象的哈希码、 GC 信息、锁信息、对象所属的类元信息等。这个过程的具体设置方式取决于 JVM 实现。")]),t._v(" "),a("li",[a("strong",[t._v("执行 init 方法。")]),t._v(" 初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。")])]),t._v(" "),a("h3",{attrs:{id:"_5、类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、类加载器"}},[t._v("#")]),t._v(" 5、类加载器")]),t._v(" "),a("p",[t._v("类加载器就是一段代码【classloader】，他能通过一个类的''全限定名''来获取描述此类的二进制字节流，把字节码文件加载到方法区。然后在堆内（heap）创建一个 java.lang.Class 对象，Class 对象封装了类在方法区内的数据结构，并且向开发者提供了访问方法区内的数据结构的接口。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210806150423581.181de308.png",alt:"image-20210806150423581"}})]),t._v(" "),a("p",[t._v("jvm当中有以下几个类加载器，他们负责从不同的classpath下加载字节码文件，classpath就是存放字节码文件的文件目录。")]),t._v(" "),a("ul",[a("li",[t._v("【Bootstrap Classloader】启动类加载器，主要加载的是JVM自身需要的类，这个类加载使用C++语言实现的，是虚拟机自身的一部分，它负责将 <JAVA_HOME>/lib路径下的核心类库或-Xbootclasspath参数指定的路径下的jar包加载到内存中，如rt.jar，如果文件名不被虚拟机识别，即使把jar包丢到lib目录下也是没有作用的(出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类)。")]),t._v(" "),a("li",[t._v("【Extension ClassLoader】扩展类加载器由Java语言实现的，它负责加载<JAVA_HOME>/lib/ext目录下或者由系统变量-Djava.ext.dir指定位路径中的类库，开发者可以直接使用标准扩展类加载器。")]),t._v(" "),a("li",[t._v("【Application ClassLoader】系统应用类加载器，它负责加载系统类路径java -classpath或-D java.class.path 指定路径下的类库，也就是我们经常用到的classpath路径，开发者可以直接使用系统类加载器，一般情况下该类加载是程序中默认的类加载器，通过ClassLoader.getSystemClassLoader()方法可以获取到该类加载器，就是我们写的代码。")])]),t._v(" "),a("p",[t._v("【双亲委派模型】")]),t._v(" "),a("p",[t._v("如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210805184616651.2d911f1f.png",alt:"image-20210805184616651"}})]),t._v(" "),a("p",[t._v("对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoadingLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 看一看，这个类是不是已经被加载了")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findLoadedClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有，就开是尝试加载了")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" t0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这句话，其实就告诉你了默认是，尝试让父类去加载")]),t._v("\n                        c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findBootstrapClassOrNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ClassNotFoundException thrown if class not found")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from the non-null parent class loader")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If still not found, then invoke findClass in order")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to find the class.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is the defining class loader; record the stats")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParentDelegationTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" t0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFindClassTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addElapsedTimeFrom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("PerfCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFindClasses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br")])]),a("p",[t._v("这玩意，其实也是一个类，这个类的作用是从某个文件夹（classpath）下拉取字节码文件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210805185501539.c24497ff.png",alt:"image-20210805185501539"}})]),t._v(" "),a("p",[t._v("双亲委派有什么好处：")]),t._v(" "),a("p",[t._v("1、防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。")]),t._v(" "),a("p",[t._v("2、保证核心.class不能被篡改。通过委托方式，不会去篡改核心.class，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全。")]),t._v(" "),a("p",[t._v("其实我们可以通过重写loadClass和findClass方法来打破双亲委派，来根据我们自身的业务特性实现相应的类加载机制。但是我们我们目前的知识储备太少，等我们学完了框架再回过头来一起分析tomcat是如何打破双亲委派模型实现多个应用程序的环境隔离。")]),t._v(" "),a("h3",{attrs:{id:"_6、运行时数据区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、运行时数据区"}},[t._v("#")]),t._v(" 6、运行时数据区")]),t._v(" "),a("p",[t._v("Java虚拟机定义了一系列逻辑数据区域，有些是随着虚拟机的启动而创建，虚拟机的关闭而销毁。还有一部分是随着线程生命周期创建销毁的。在学习之前我们需要了解一下线程的基本概念如下，大家尽量理解就可以了。")]),t._v(" "),a("p",[t._v("进程（Process）我们可以这样简单的理解，一个应用程序就是一个进程。")]),t._v(" "),a("p",[t._v("线程（thread） 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。")]),t._v(" "),a("p",[t._v("现在咱们看看jvm的运行时内存分布：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210806164903998.ab963a2c.png",alt:"image-20210806164903998"}})]),t._v(" "),a("p",[t._v("在Java虚拟机中堆是所有线程都可以共享的内存区域，是存放所有类实例和数组对象的地方。在虚拟机启动就根据相关堆参数，创建堆，它也是垃圾收集器工作的主要区域。")]),t._v(" "),a("p",[t._v("堆内存里的对象不会被显式的回收，而是由【垃圾回收器回收】，为了配合垃圾收集器的特性我们可以把堆分为年轻代和老年代。")]),t._v(" "),a("h4",{attrs:{id:"_1-虚拟机栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚拟机栈"}},[t._v("#")]),t._v(" （1）虚拟机栈")]),t._v(" "),a("p",[t._v("虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame，是方法运行时的基础数据结构）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")]),t._v(" "),a("p",[t._v("每个栈桢又有独立的数据结构：")]),t._v(" "),a("h5",{attrs:{id:"a-局部变量表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-局部变量表"}},[t._v("#")]),t._v(" a. 局部变量表")]),t._v(" "),a("p",[t._v("局部变量表是存放方法参数和局部变量的区域。 局部变量没有准备阶段， 必须显式初始化。如果是非静态方法，"),a("strong",[t._v("则在 index[0] 位置上存储的是方法所属对象的实例引用")]),t._v("，一个引用变量占 4 个字节，随后存储的是参数和局部变量。字节码指令中的 STORE 指令就是将操作栈中计算完成的局部变呈写回局部变量表的存储空间内。")]),t._v(" "),a("p",[t._v("虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的 Java 虚拟机都可动态扩展），如果扩展时无法申请到足够的内存，就会抛出 OutOfMemoryError 异常。")]),t._v(" "),a("h5",{attrs:{id:"b-操作数栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-操作数栈"}},[t._v("#")]),t._v(" b. 操作数栈")]),t._v(" "),a("blockquote",[a("p",[t._v("i++ 和 ++i 的区别：")])]),t._v(" "),a("ol",[a("li",[t._v("i++：从局部变量表取出 i 并压入操作栈(load memory)，然后对局部变量表中的 i 自增 1(add&store memory)，将操作栈栈顶值取出使用，如此线程从操作栈读到的是自增之前的值。")]),t._v(" "),a("li",[t._v("++i：先对局部变量表的 i 自增 1(load memory&add&store memory)，然后取出并压入操作栈(load memory)，再将操作栈栈顶值取出使用，线程从操作栈读到的是自增之后的值。")])]),t._v(" "),a("h5",{attrs:{id:"c-动态链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-动态链接"}},[t._v("#")]),t._v(" c. 动态链接")]),t._v(" "),a("p",[t._v("每个栈帧中包含一个在常量池中对当前方法的引用， 目的是支持方法调用过程的动态连接。")]),t._v(" "),a("h5",{attrs:{id:"d-方法返回地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-方法返回地址"}},[t._v("#")]),t._v(" d.方法返回地址")]),t._v(" "),a("p",[t._v("方法执行时有两种退出情况：")]),t._v(" "),a("ol",[a("li",[t._v("正常退出，即正常执行到任何方法的返回字节码指令，如 RETURN、IRETURN、ARETURN 等；")]),t._v(" "),a("li",[t._v("异常退出。")])]),t._v(" "),a("p",[t._v("无论何种退出情况，都将返回至方法当前被调用的位置。方法退出的过程相当于弹出当前栈帧，退出可能有三种方式：")]),t._v(" "),a("ol",[a("li",[t._v("返回值压入上层调用栈帧。")]),t._v(" "),a("li",[t._v("异常信息抛给能够处理的栈帧。")]),t._v(" "),a("li",[t._v("PC计数器指向方法调用后的下一条指令。")])]),t._v(" "),a("h3",{attrs:{id:"_7、-本地方法栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、-本地方法栈"}},[t._v("#")]),t._v(" 7、 本地方法栈")]),t._v(" "),a("p",[t._v("本地方法（Native Method）：一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。java语言本身无法调用很多的系统资源的，需要JVM和系统打交道，比如操作内存、处理文件、线程调度等。而这部分代码不能用java直接实现，往往是使用C++写的，这类方法就是本地方法。")]),t._v(" "),a("p",[t._v("其实我们见过不少：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CloneNotSupportedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("他们被native修饰，没有方法体，但他们不是抽象方法，他们的实现不是java实现的，你要知道jvm本身就是C++写的。")]),t._v(" "),a("p",[t._v("如果我们想在Java底层里调用别的语言代码的话就需要用到别的方法栈了,比如Java虚拟机的实现会用到传统的栈(C stack)来调用native方法，这个就是本地方法栈的应用，当然这个不是必须实现的，完全取决于虚拟机的实现。")]),t._v(" "),a("h3",{attrs:{id:"_8、程序计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、程序计数器"}},[t._v("#")]),t._v(" 8、程序计数器")]),t._v(" "),a("p",[t._v("程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。")]),t._v(" "),a("p",[t._v("由于 Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器内核都只会执行一条线程中的指令。为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。")]),t._v(" "),a("h3",{attrs:{id:"_9、java堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、java堆"}},[t._v("#")]),t._v(" 9、Java堆")]),t._v(" "),a("p",[t._v("对于大多数应用来说，Java 堆（Java Heap）是 Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),t._v(" "),a("h3",{attrs:{id:"_10、方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、方法区"}},[t._v("#")]),t._v(" 10、方法区")]),t._v(" "),a("p",[t._v("方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据一句话总结就是存储"),a("strong",[t._v("元数据")]),t._v("地方")]),t._v(" "),a("p",[t._v("JDK8 之前，Hotspot 中方法区的实现是永久代（Perm），JDK8 开始使用元空间（Metaspace），以前永久代所有内容的字符串常量移至堆内存，其他内容移至元空间，元空间直接在本地内存分配。")]),t._v(" "),a("p",[t._v("为什么要使用元空间取代永久代的实现？")]),t._v(" "),a("ol",[a("li",[t._v("字符串存在永久代中，容易出现性能问题和内存溢出。")]),t._v(" "),a("li",[t._v("类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。")]),t._v(" "),a("li",[t._v("永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。")])]),t._v(" "),a("h3",{attrs:{id:"_11、垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、垃圾回收"}},[t._v("#")]),t._v(" 11、垃圾回收")]),t._v(" "),a("p",[t._v("其实我们java程序中的绝大部分对象都是朝生夕死的。那些使用过，以后不会再使用的对象，是需要从堆内存清除掉的。当然【栈内存】是不需要清除数据的，栈这种数据结构的特点是，一个数据从栈中弹出，数据自然就被清理掉了，当然【方法区】存有我们的元数据这些数据也是不需要清理的。")]),t._v(" "),a("h4",{attrs:{id:"_1-回收算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-回收算法"}},[t._v("#")]),t._v(" （1）回收算法")]),t._v(" "),a("blockquote",[a("p",[t._v("引用计数法")])]),t._v(" "),a("p",[t._v("给对象添加一引用计数器，被引用一次计数器值就加 1；当引用失效时，计数器值就减 1；计数器为 0 时，对象就是不可能再被使用的，简单高效，缺点是无法解决对象之间相互循环引用的问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("可达性分析算法(根可达算法)")])]),t._v(" "),a("p",[t._v('通过一系列的称为 "GC Roots" 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到 GC Roots 没有')]),t._v(" "),a("p",[t._v("任何引用链相连时，则证明此对象是不可用的。此算法解决了上述循环引用的问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/2184951-06859aad2e07258d.b3ee8b43.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在Java语言中，可作为 GC Roots 的对象包括下面几种：")]),t._v(" "),a("ul",[a("li",[t._v("虚拟机栈（栈帧中的本地变量表）中引用的对象。")]),t._v(" "),a("li",[t._v("方法区中类静态属性引用的对象。")]),t._v(" "),a("li",[t._v("方法区中常量引用的对象。")])]),t._v(" "),a("h4",{attrs:{id:"_2-垃圾回收算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-垃圾回收算法"}},[t._v("#")]),t._v(" （2）垃圾回收算法")]),t._v(" "),a("blockquote",[a("p",[t._v("垃圾收集算法一共有 4 种：")])]),t._v(" "),a("ol",[a("li",[t._v("标记-清除算法")]),t._v(" "),a("li",[t._v("复制算法")]),t._v(" "),a("li",[t._v("标记整理算法")]),t._v(" "),a("li",[t._v("分代收集算法")])]),t._v(" "),a("h5",{attrs:{id:"第一种-标记-清除算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种-标记-清除算法"}},[t._v("#")]),t._v(" 第一种：标记-清除算法")]),t._v(" "),a("p",[t._v("最基础的收集算法是“标记-清除”（Mark-Sweep）算法，分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。")]),t._v(" "),a("p",[t._v("它的主要不足有两个：")]),t._v(" "),a("ol",[a("li",[t._v("效率问题，标记和清除两个过程的效率都不高；")]),t._v(" "),a("li",[t._v("空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。")])]),t._v(" "),a("p",[t._v("标记—清除算法的执行过程如下图。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-32d5034ee61de6cc.0027ef87.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第二种-复制算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二种-复制算法"}},[t._v("#")]),t._v(" 第二种：复制算法")]),t._v(" "),a("p",[t._v("为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。")]),t._v(" "),a("p",[t._v("这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半。复制算法的执行过程如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-2f1313c6b35c1f5b.1f6209d0.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第三种-标记-整理算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三种-标记-整理算法"}},[t._v("#")]),t._v(" 第三种：标记-整理算法")]),t._v(" "),a("p",[t._v("复制算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费 50% 的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都 100% 存活的极端情况，所以在老年代一般不能直接选用这种算法。")]),t._v(" "),a("p",[t._v("根据老年代的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后"),a("strong",[t._v("直接清理掉端边界以外的内存")]),t._v("，“标记-整理”算法的示意图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-76fb92c61eff10b2.b945e065.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第四种-分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四种-分代收集算法"}},[t._v("#")]),t._v(" 第四种：分代收集算法")]),t._v(" "),a("p",[t._v("当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，根据对象存活周期的不同将内存划分为几块并采用不用的垃圾收集算法。他不是新的算法，只是前三种算法的融合。")]),t._v(" "),a("p",[t._v("一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210824120250286.35f833fd.png",alt:"image-20210824120250286"}})]),t._v(" "),a("p",[t._v("下图是new一个对象之后，这个对象的内存分配流程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210806161855200.60bf527d.png",alt:"image-20210806161855200"}})]),t._v(" "),a("p",[a("strong",[t._v("1、对象优先在Eden分配")])]),t._v(" "),a("p",[t._v("大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。当然如果有些小对象也可能直接在栈上分配。")]),t._v(" "),a("p",[a("strong",[t._v("2、Minor GC 和 Full GC 有什么不一样吗？")])]),t._v(" "),a("ul",[a("li",[t._v("新生代 GC（Minor GC）：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。")]),t._v(" "),a("li",[t._v("老年代 GC（Major GC/Full GC）：指发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次的 Minor GC。Major GC 的速度一般会比 Minor GC 慢 10 倍以上。一旦出现fullGC就必然会出现STW，stop the world。")])]),t._v(" "),a("p",[a("strong",[t._v("3、大对象直接进入老年代")])]),t._v(" "),a("p",[t._v("所谓的大对象是指，需要大量连续内存空间的 Java 对象，最典型的大对象就是那种很长的字符串以及数组（ byte[] 数组就是典型的大对象）。大对象对虚拟机的内存分配来说就是一个坏消息（特别是短命大对象，写程序的时候应当避免），经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。")]),t._v(" "),a("p",[a("strong",[t._v("4、长期存活的对象将进入老年代")])]),t._v(" "),a("p",[t._v("虚拟机给每个对象定义了一个对象年龄（Age）计数器。这个年龄就记在对象头中。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并且对象年龄设为 1 。对象在 Survivor 区中每“熬过”一次 Minor GC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就将会被晋升到老年代中。")]),t._v(" "),a("p",[a("strong",[t._v("5、动态对象年龄判定")])]),t._v(" "),a("p",[t._v("为了能更好地适应不同程序的内存状况，无须等到 MaxTenuringThreshold 中要求的年龄，同年对象达到 Survivor 空间的一半后，他们以及年龄大于他们的对象都将直接进入老年代。")]),t._v(" "),a("p",[a("strong",[t._v("6、空间分配担保")])]),t._v(" "),a("p",[t._v("在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代，所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。")]),t._v(" "),a("p",[t._v("只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC ，否则将进行 Full GC 。")]),t._v(" "),a("h3",{attrs:{id:"_13、垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、垃圾回收器"}},[t._v("#")]),t._v(" 13、垃圾回收器")]),t._v(" "),a("p",[t._v("垃圾回收器有自己的发展过程，整个发展基本是围绕硬件的发展而展开的，比如我们最早的电脑可能只有几十k的内存，慢慢的增长到几十兆，再到现在的几个g，甚至几个T，cpu更是从单核到现在16核 32核。")]),t._v(" "),a("p",[t._v("垃圾清理本来就是一个打扫卫生的工作，你想想，原来是40平米的房子你妈妈一个人清理，后来的联排别墅，家里10个保姆一起清理，管理的方法肯定不同。")]),t._v(" "),a("p",[t._v("这玩意就是打扫卫生的，作用在堆内存。咱们先说一个场景，你家有五个孩子，把家里弄的乱糟糟，爸爸妈妈负责打扫卫生。")]),t._v(" "),a("p",[t._v("以下内容简单了解，看不懂了以后学习jvm：")]),t._v(" "),a("h5",{attrs:{id:"第一-serial收集器-串行收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一-serial收集器-串行收集器"}},[t._v("#")]),t._v(" 第一：Serial收集器（串行收集器）")]),t._v(" "),a("p",[t._v("这种收集器的流程是这样的：你妈大喊，都别动，接着你妈开始打扫，直到你妈打扫完你们开始做自己的工作。")]),t._v(" "),a("p",[t._v('Serial 收集器是最基本、发展历史最悠久的收集器，曾经是虚拟机新生代收集的唯一选择。这是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个 CPU 或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。这个过程叫做"Stop The World"，这是造成程序卡顿的原因之一，只不过一般的时间比较小感知不到而已。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-9bf73c0cdf9a7066.bbdb6dc2.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第二-serial-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二-serial-old-收集器"}},[t._v("#")]),t._v(" 第二：Serial Old 收集器")]),t._v(" "),a("p",[t._v("Serial Old 是 Serial 收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”算法。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-7710a429f033fc31.a73b315a.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第三-parallel-old收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三-parallel-old收集器"}},[t._v("#")]),t._v(" 第三：Parallel Old收集器")]),t._v(" "),a("p",[t._v("Parallel Old 是 Parallel Scavenge 收集器的老年代版本，使用多线程和“标记-整理”算法。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-627c4ce9f8eae23c.4e02e816.png",alt:"img"}})]),t._v(" "),a("p",[t._v("下边几种，咱们以后有Jvm专题的时候讲，不好理解")]),t._v(" "),a("h5",{attrs:{id:"第四-parallel-scavenge收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四-parallel-scavenge收集器"}},[t._v("#")]),t._v(" 第四：Parallel Scavenge收集器")]),t._v(" "),a("p",[t._v("它主要关注吞吐量，所谓吞吐量就是"),a("strong",[t._v("代码运行时间")]),t._v("/（"),a("strong",[t._v("代码运行时间")]),t._v("+"),a("strong",[t._v("垃圾回收时间")]),t._v("）。比如虚拟机运行100分钟，垃圾回收耗时1分钟，那么吞吐量就是99%。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/d439b6003af33a87c2dc66521f0c163f5243b598.ea4a907f.jpeg",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第五-parnew收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五-parnew收集器"}},[t._v("#")]),t._v(" 第五：ParNew收集器")]),t._v(" "),a("p",[t._v("ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为Serial 收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。ParNew 收集器的工作过程如下图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-bdc22bf25c2c8ba7.2985378a.png",alt:"img"}})]),t._v(" "),a("h5",{attrs:{id:"第六-cms收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六-cms收集器"}},[t._v("#")]),t._v(" 第六：CMS收集器")]),t._v(" "),a("p",[t._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。")]),t._v(" "),a("p",[t._v("目前很大一部分的 Java 应用集中在互联网站或者 B/S 系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS 收集器就非常符合这类应用的需求。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-6401f1a80d3f1c81.1379facf.png",alt:"img"}})]),t._v(" "),a("p",[t._v("CMS 是一款优秀的收集器，它的主要优点在名字上已经体现出来了：并发收集、低停顿。")]),t._v(" "),a("h5",{attrs:{id:"第七-g1收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七-g1收集器"}},[t._v("#")]),t._v(" 第七：G1收集器")]),t._v(" "),a("p",[t._v("G1（Garbage-First）收集器是当今收集器技术发展的最前沿成果之一，JDK1.9已经默认使用这个垃圾回收器了。G1 是一款面向服务端应用的垃圾收集器。HotSpot 开发团队赋予它的使命是（在比较长期的）未来可以替换掉 JDK 1.5 中发布的 CMS 收集器。与其他 GC 收集器相比，G1 具备如下特点。")]),t._v(" "),a("p",[t._v("G1依然属于分代垃圾回收器，它会区分年代和老年代，依然有eden和survivor区，但从堆的结构上看，它并不要求整个eden区、年清代或者老年代都连续。它使用了全新的分区算法。其特点如下：")]),t._v(" "),a("p",[t._v("并行性：G1在回收期间，可以由多个GC线程同时工作，有效利用多核计算能力。")]),t._v(" "),a("p",[t._v("并发性：G1拥有与应用程序交替执行的能力，因此一般来说，不会在整个回收期间完全阻塞应用程序。")]),t._v(" "),a("p",[t._v("分代GC：与之前回收器不同，其他回收器，它们要么工作在年轻代要么工作在老年代。G1可以同时兼顾年轻代与老年代。")]),t._v(" "),a("p",[t._v("空间整理：G1在回收过程中，会进行适当的对象移动，不像CMS，只是简单的标记清除，在若干次GC后CMS必须进行一次碎片整理，G1在每次回收时都会有效的复制对象，减少空间碎片。")]),t._v(" "),a("p",[t._v("可预见性：由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收范围，因此对于全局停顿也能得到更好的控制。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/14923529-8cdd3afd7d545435.8669b8ad.png",alt:"img"}})]),t._v(" "),a("p",[t._v("上述的垃圾收集器并非是可以随意搭配的，有搭配要求，详细搭配如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210806173629893.3f9d58df.png",alt:"image-20210806173629893"}})]),t._v(" "),a("p",[a("strong",[t._v("第一种：新生代使用Serial，老年代使用Serial Old")])]),t._v(" "),a("p",[t._v("最古老的，单线程，独占式，成熟，适合单CPU 服务器，如果你的服务器是单核CPU，就这个想都不用想,速度一定是最快的。")]),t._v(" "),a("p",[a("strong",[t._v("第二种：新生代使用ParallelScanvenge，老年代使用Parallel Old")])]),t._v(" "),a("p",[t._v("相比第三种，对于吞吐量的关注延伸至老年代，并且老年代也采用多线程回收，是对面向吞吐量特性开发的组合，如果关注吞吐量推荐使用第四种")]),t._v(" "),a("p",[a("strong",[t._v("第三种：表示新生代使用ParNew，老年代的用CMS")])]),t._v(" "),a("p",[t._v("这一套的使用，更加关注一个项目的吞吐量。")]),t._v(" "),a("p",[a("strong",[t._v("第四种：使用G1")]),t._v("，G1之后慢慢的从分代垃圾回收向分区垃圾回收转变")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/image-20210824175042147.e4091a89.png",alt:"image-20210824175042147"}})]),t._v(" "),a("h3",{attrs:{id:"_14、常用jvm参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、常用jvm参数"}},[t._v("#")]),t._v(" 14、常用JVM参数")]),t._v(" "),a("p",[t._v("网上有很详细的关于各种JVM参数说明，本篇只记录很常用的几个参数，为了方便以后自己查阅")]),t._v(" "),a("p",[a("strong",[t._v("1、JVM三种参数类型")])]),t._v(" "),a("ul",[a("li",[t._v("标准参数。如 -version、-help")]),t._v(" "),a("li",[t._v("非标准参数。如 -Xms、-Xmx")]),t._v(" "),a("li",[t._v("不稳定参数。如-XX:+PrintGC")])]),t._v(" "),a("p",[a("strong",[t._v("2、XX参数数值类型")])]),t._v(" "),a("ul",[a("li",[t._v("布尔类型。如-XX:+PrintGCDetails，其中 + 和 - 分别表示开启/关闭某个属性，PrintGCDetails表示打印GC详情")]),t._v(" "),a("li",[t._v("KV设值类型。如-XX:NewSize=256M，设置年轻代空间大小为256M")])]),t._v(" "),a("p",[a("strong",[t._v("3、常用参数")])]),t._v(" "),a("p",[t._v("X参数：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/647585-20200612174516774-1900931464.c47ca4b1.png",alt:"img"}})]),t._v(" "),a("p",[t._v("XX参数：")]),t._v(" "),a("ul",[a("li",[t._v("-XX:NewSize：设置年轻代最小空间大小")]),t._v(" "),a("li",[t._v("-XX:MaxNewSize：设置年轻代最大空间大小")]),t._v(" "),a("li",[t._v("-XX:PermSize：设置永久代最小空间大小")]),t._v(" "),a("li",[t._v("-XX:MaxPermSize：设置永久代最大空间大小")]),t._v(" "),a("li",[t._v("-XX:NewRatio：设置年轻代和老年代的比值。默认值-XX:NewRatio=2，表示年轻代与老年代比值为1:2，年轻代占整个堆大小的1/3")]),t._v(" "),a("li",[t._v("-XX:SurvivorRatio：设置年轻代中Eden区Survivor区的容量比值。默认值-XX:SurvivorRatio=8，表示Eden : Survivor0 : Survivor1 = 8 : 1 : 1")])]),t._v(" "),a("p",[a("strong",[t._v("4、GC日志")])]),t._v(" "),a("p",[t._v("在设置JVM参数的时候，可以设置GC打印日志参数：-XX:+PrintGCDetails。下面GC输出日志信息：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.ydlclass.com/doc21xnv/assets/647585-20200612181734029-959765279.55393790.png",alt:"img"}})]),t._v(" "),a("p",[t._v("日志含义如下：")]),t._v(" "),a("p",[t._v("GC：表示进行了一次Minor GC，即从年轻代空间(包括 Eden 和 Survivor 区域)回收内存")]),t._v(" "),a("p",[t._v("Allocation Failure：在年轻代中没有足够的空间能够存储新的数据")]),t._v(" "),a("p",[t._v("Full GC (Ergonomics)：表示进行了一次Full GC，即清理整个堆空间(包含年轻代和老年代)")]),t._v(" "),a("p",[t._v("PSYoungGen: 1024K->1024K(1536K)：垃圾回收器是Paralle Scavenge，年轻代区GC前->GC后该区域已使用量，后面的1536表示该区域总量")]),t._v(" "),a("p",[t._v("ParOldGen: 4032K->4032K(4096K)：老年代区，GC前->GC后该区域已使用量，后面的4096表示该区域总量")]),t._v(" "),a("p",[t._v("5056K->5056K(5632K)：GC前 -> GC后Java堆的使用量，后面的5632表示Java堆总量")]),t._v(" "),a("p",[t._v("Metaspace: 3117K->3117K(1056768K)：JDK8中取消了永久代，新增了一个叫元空间(Metaspace)的区域，对应的还是JVM规范中的方法区(主要存放一些class和元数据的信息)，该数据表示该区GC前后使用量")]),t._v(" "),a("p",[t._v("0.0214352 secs：暂停STW 时间，即GC的时间")]),t._v(" "),a("p",[t._v("Times: user=0.02 sys=0.01, real=0.02 secs：更为详细的时间占比统计")]),t._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[GC (Allocation Failure) [PSYoungGen: 4704K->488K(6144K)] 4704K->700K(19968K), 0.0005987 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \nHeap\n PSYoungGen      total 6144K, used 2871K [0x00000000ff980000, 0x0000000100000000, 0x0000000100000000)\n  eden space 5632K, 42% used [0x00000000ff980000,0x00000000ffbd3e18,0x00000000fff00000)\n  from space 512K, 95% used [0x00000000fff00000,0x00000000fff7a020,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 13824K, used 212K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)\n  object space 13824K, 1% used [0x00000000fec00000,0x00000000fec35020,0x00000000ff980000)\n Metaspace       used 3142K, capacity 4496K, committed 4864K, reserved 1056768K\n  class space    used 343K, capacity 388K, committed 512K, reserved 1048576K\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h1",{attrs:{id:"附录-jvm指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录-jvm指令"}},[t._v("#")]),t._v(" 附录：jvm指令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令码")]),t._v(" "),a("th",[t._v("助记符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0x00")]),t._v(" "),a("td",[t._v("nop")]),t._v(" "),a("td",[t._v("什么都不做")])]),t._v(" "),a("tr",[a("td",[t._v("0x01")]),t._v(" "),a("td",[t._v("aconst_null")]),t._v(" "),a("td",[t._v("将 null 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x02")]),t._v(" "),a("td",[t._v("iconst_m1")]),t._v(" "),a("td",[t._v("将 int 型 -1 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x03")]),t._v(" "),a("td",[t._v("iconst_0")]),t._v(" "),a("td",[t._v("将 int 型 0 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x04")]),t._v(" "),a("td",[t._v("iconst_1")]),t._v(" "),a("td",[t._v("将 int 型 1 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x05")]),t._v(" "),a("td",[t._v("iconst_2")]),t._v(" "),a("td",[t._v("将 int 型 2 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x06")]),t._v(" "),a("td",[t._v("iconst_3")]),t._v(" "),a("td",[t._v("将 int 型 3 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x07")]),t._v(" "),a("td",[t._v("iconst_4")]),t._v(" "),a("td",[t._v("将 int 型 4 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x08")]),t._v(" "),a("td",[t._v("iconst_5")]),t._v(" "),a("td",[t._v("将 int 型 5 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x09")]),t._v(" "),a("td",[t._v("lconst_0")]),t._v(" "),a("td",[t._v("将 long 型 0 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0a")]),t._v(" "),a("td",[t._v("lconst_1")]),t._v(" "),a("td",[t._v("将 long 型 1 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0b")]),t._v(" "),a("td",[t._v("fconst_0")]),t._v(" "),a("td",[t._v("将 float 型 0 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0c")]),t._v(" "),a("td",[t._v("fconst_1")]),t._v(" "),a("td",[t._v("将 float 型 1 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0d")]),t._v(" "),a("td",[t._v("fconst_2")]),t._v(" "),a("td",[t._v("将 float 型 2 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0e")]),t._v(" "),a("td",[t._v("dconst_0")]),t._v(" "),a("td",[t._v("将 double 型 0 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x0f")]),t._v(" "),a("td",[t._v("dconst_1")]),t._v(" "),a("td",[t._v("将 double 型 1 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x10")]),t._v(" "),a("td",[t._v("bipush")]),t._v(" "),a("td",[t._v("将单字节的常量值 (-128~127) 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x11")]),t._v(" "),a("td",[t._v("sipush")]),t._v(" "),a("td",[t._v("将一个短整型常量值 (-32768~32767) 推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x12")]),t._v(" "),a("td",[t._v("ldc")]),t._v(" "),a("td",[t._v("把常量池中的项压入栈")])]),t._v(" "),a("tr",[a("td",[t._v("0x13")]),t._v(" "),a("td",[t._v("ldc_w")]),t._v(" "),a("td",[t._v("把常量池中的项压入栈（使用宽索引）")])]),t._v(" "),a("tr",[a("td",[t._v("0x14")]),t._v(" "),a("td",[t._v("ldc2_w")]),t._v(" "),a("td",[t._v("将 long 或 double 型常量值从常量池中推送至栈顶（宽索引）")])]),t._v(" "),a("tr",[a("td",[t._v("0x15")]),t._v(" "),a("td",[t._v("iload")]),t._v(" "),a("td",[t._v("将指定的 int 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x16")]),t._v(" "),a("td",[t._v("lload")]),t._v(" "),a("td",[t._v("将指定的 long 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x17")]),t._v(" "),a("td",[t._v("fload")]),t._v(" "),a("td",[t._v("将指定的 float 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x18")]),t._v(" "),a("td",[t._v("dload")]),t._v(" "),a("td",[t._v("将指定的 double 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x19")]),t._v(" "),a("td",[t._v("aload")]),t._v(" "),a("td",[t._v("将指定的引用类型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1a")]),t._v(" "),a("td",[t._v("iload_0")]),t._v(" "),a("td",[t._v("将第一个 int 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1b")]),t._v(" "),a("td",[t._v("iload_1")]),t._v(" "),a("td",[t._v("将第二个 int 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1c")]),t._v(" "),a("td",[t._v("iload_2")]),t._v(" "),a("td",[t._v("将第三个 int 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1d")]),t._v(" "),a("td",[t._v("iload_3")]),t._v(" "),a("td",[t._v("将第四个 int 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1e")]),t._v(" "),a("td",[t._v("lload_0")]),t._v(" "),a("td",[t._v("将第一个 long 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x1f")]),t._v(" "),a("td",[t._v("lload_1")]),t._v(" "),a("td",[t._v("将第二个 long 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x20")]),t._v(" "),a("td",[t._v("lload_2")]),t._v(" "),a("td",[t._v("将第三个 long 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x21")]),t._v(" "),a("td",[t._v("lload_3")]),t._v(" "),a("td",[t._v("将第四个 long 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x22")]),t._v(" "),a("td",[t._v("fload_0")]),t._v(" "),a("td",[t._v("将第一个 float 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x23")]),t._v(" "),a("td",[t._v("fload_1")]),t._v(" "),a("td",[t._v("将第二个 float 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x24")]),t._v(" "),a("td",[t._v("fload_2")]),t._v(" "),a("td",[t._v("将第三个 float 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x25")]),t._v(" "),a("td",[t._v("fload_3")]),t._v(" "),a("td",[t._v("将第四个 float 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x26")]),t._v(" "),a("td",[t._v("dload_0")]),t._v(" "),a("td",[t._v("将第一个 double 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x27")]),t._v(" "),a("td",[t._v("dload_1")]),t._v(" "),a("td",[t._v("将第二个 double 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x28")]),t._v(" "),a("td",[t._v("dload_2")]),t._v(" "),a("td",[t._v("将第三个 double 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x29")]),t._v(" "),a("td",[t._v("dload_3")]),t._v(" "),a("td",[t._v("将第四个 double 型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2a")]),t._v(" "),a("td",[t._v("aload_0")]),t._v(" "),a("td",[t._v("将第一个引用类型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2b")]),t._v(" "),a("td",[t._v("aload_1")]),t._v(" "),a("td",[t._v("将第二个引用类型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2c")]),t._v(" "),a("td",[t._v("aload_2")]),t._v(" "),a("td",[t._v("将第三个引用类型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2d")]),t._v(" "),a("td",[t._v("aload_3")]),t._v(" "),a("td",[t._v("将第四个引用类型本地变量推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2e")]),t._v(" "),a("td",[t._v("iaload")]),t._v(" "),a("td",[t._v("将 int 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x2f")]),t._v(" "),a("td",[t._v("laload")]),t._v(" "),a("td",[t._v("将 long 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x30")]),t._v(" "),a("td",[t._v("faload")]),t._v(" "),a("td",[t._v("将 float 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x31")]),t._v(" "),a("td",[t._v("daload")]),t._v(" "),a("td",[t._v("将 double 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x32")]),t._v(" "),a("td",[t._v("aaload")]),t._v(" "),a("td",[t._v("将引用型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x33")]),t._v(" "),a("td",[t._v("baload")]),t._v(" "),a("td",[t._v("将 boolean 或 byte 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x34")]),t._v(" "),a("td",[t._v("caload")]),t._v(" "),a("td",[t._v("将 char 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x35")]),t._v(" "),a("td",[t._v("saload")]),t._v(" "),a("td",[t._v("将 short 型数组指定索引的值推送至栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x36")]),t._v(" "),a("td",[t._v("istore")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入指定本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x37")]),t._v(" "),a("td",[t._v("lstore")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入指定本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x38")]),t._v(" "),a("td",[t._v("fstore")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入指定本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x39")]),t._v(" "),a("td",[t._v("dstore")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入指定本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3a")]),t._v(" "),a("td",[t._v("astore")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入指定本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3b")]),t._v(" "),a("td",[t._v("istore_0")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入第一个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3c")]),t._v(" "),a("td",[t._v("istore_1")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入第二个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3d")]),t._v(" "),a("td",[t._v("istore_2")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入第三个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3e")]),t._v(" "),a("td",[t._v("istore_3")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入第四个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x3f")]),t._v(" "),a("td",[t._v("lstore_0")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入第一个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x40")]),t._v(" "),a("td",[t._v("lstore_1")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入第二个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x41")]),t._v(" "),a("td",[t._v("lstore_2")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入第三个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x42")]),t._v(" "),a("td",[t._v("lstore_3")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入第四个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x43")]),t._v(" "),a("td",[t._v("fstore_0")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入第一个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x44")]),t._v(" "),a("td",[t._v("fstore_1")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入第二个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x45")]),t._v(" "),a("td",[t._v("fstore_2")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入第三个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x46")]),t._v(" "),a("td",[t._v("fstore_3")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入第四个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x47")]),t._v(" "),a("td",[t._v("dstore_0")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入第一个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x48")]),t._v(" "),a("td",[t._v("dstore_1")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入第二个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x49")]),t._v(" "),a("td",[t._v("dstore_2")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入第三个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4a")]),t._v(" "),a("td",[t._v("dstore_3")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入第四个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4b")]),t._v(" "),a("td",[t._v("astore_0")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入第一个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4c")]),t._v(" "),a("td",[t._v("astore_1")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入第二个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4d")]),t._v(" "),a("td",[t._v("astore_2")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入第三个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4e")]),t._v(" "),a("td",[t._v("astore_3")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入第四个本地变量")])]),t._v(" "),a("tr",[a("td",[t._v("0x4f")]),t._v(" "),a("td",[t._v("iastore")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x50")]),t._v(" "),a("td",[t._v("lastore")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x51")]),t._v(" "),a("td",[t._v("fastore")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x52")]),t._v(" "),a("td",[t._v("dastore")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x53")]),t._v(" "),a("td",[t._v("aastore")]),t._v(" "),a("td",[t._v("将栈顶引用型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x54")]),t._v(" "),a("td",[t._v("bastore")]),t._v(" "),a("td",[t._v("将栈顶 boolean 或 byte 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x55")]),t._v(" "),a("td",[t._v("castore")]),t._v(" "),a("td",[t._v("将栈顶 char 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x56")]),t._v(" "),a("td",[t._v("sastore")]),t._v(" "),a("td",[t._v("将栈顶 short 型数值存入指定数组的指定索引位置")])]),t._v(" "),a("tr",[a("td",[t._v("0x57")]),t._v(" "),a("td",[t._v("pop")]),t._v(" "),a("td",[t._v("将栈顶数值弹出")])]),t._v(" "),a("tr",[a("td",[t._v("0x58")]),t._v(" "),a("td",[t._v("pop2")]),t._v(" "),a("td",[t._v("将栈顶的一个（long 或 double 类型的)或两个数值弹出（其它）")])]),t._v(" "),a("tr",[a("td",[t._v("0x59")]),t._v(" "),a("td",[t._v("dup")]),t._v(" "),a("td",[t._v("复制栈顶数值并将复制值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x5a")]),t._v(" "),a("td",[t._v("dup_x1")]),t._v(" "),a("td",[t._v("复制栈顶数值并将两个复制值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x5b")]),t._v(" "),a("td",[t._v("dup_x2")]),t._v(" "),a("td",[t._v("复制栈顶数值并将三个（或两个）复制值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x5c")]),t._v(" "),a("td",[t._v("dup2")]),t._v(" "),a("td",[t._v("复制栈顶一个（long 或 double 类型的)或两个（其它）数值并将复制值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x5d")]),t._v(" "),a("td",[t._v("dup2_x1")]),t._v(" "),a("td",[t._v("<待补充>")])]),t._v(" "),a("tr",[a("td",[t._v("0x5e")]),t._v(" "),a("td",[t._v("dup2_x2")]),t._v(" "),a("td",[t._v("<待补充>")])]),t._v(" "),a("tr",[a("td",[t._v("0x5f")]),t._v(" "),a("td",[t._v("swap")]),t._v(" "),a("td",[t._v("将栈最顶端的两个数值互换(数值不能是 long 或 double 类型的)")])]),t._v(" "),a("tr",[a("td",[t._v("0x60")]),t._v(" "),a("td",[t._v("iadd")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值相加并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x61")]),t._v(" "),a("td",[t._v("ladd")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值相加并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x62")]),t._v(" "),a("td",[t._v("fadd")]),t._v(" "),a("td",[t._v("将栈顶两 float 型数值相加并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x63")]),t._v(" "),a("td",[t._v("dadd")]),t._v(" "),a("td",[t._v("将栈顶两 double 型数值相加并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x64")]),t._v(" "),a("td",[t._v("isub")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值相减并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x65")]),t._v(" "),a("td",[t._v("lsub")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值相减并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x66")]),t._v(" "),a("td",[t._v("fsub")]),t._v(" "),a("td",[t._v("将栈顶两 float 型数值相减并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x67")]),t._v(" "),a("td",[t._v("dsub")]),t._v(" "),a("td",[t._v("将栈顶两 double 型数值相减并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x68")]),t._v(" "),a("td",[t._v("imul")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值相乘并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x69")]),t._v(" "),a("td",[t._v("lmul")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值相乘并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6a")]),t._v(" "),a("td",[t._v("fmul")]),t._v(" "),a("td",[t._v("将栈顶两 float 型数值相乘并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6b")]),t._v(" "),a("td",[t._v("dmul")]),t._v(" "),a("td",[t._v("将栈顶两 double 型数值相乘并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6c")]),t._v(" "),a("td",[t._v("idiv")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值相除并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6d")]),t._v(" "),a("td",[t._v("ldiv")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值相除并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6e")]),t._v(" "),a("td",[t._v("fdiv")]),t._v(" "),a("td",[t._v("将栈顶两 float 型数值相除并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x6f")]),t._v(" "),a("td",[t._v("ddiv")]),t._v(" "),a("td",[t._v("将栈顶两 double 型数值相除并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x70")]),t._v(" "),a("td",[t._v("irem")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值作取模运算并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x71")]),t._v(" "),a("td",[t._v("lrem")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值作取模运算并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x72")]),t._v(" "),a("td",[t._v("frem")]),t._v(" "),a("td",[t._v("将栈顶两 float 型数值作取模运算并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x73")]),t._v(" "),a("td",[t._v("drem")]),t._v(" "),a("td",[t._v("将栈顶两 double 型数值作取模运算并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x74")]),t._v(" "),a("td",[t._v("ineg")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值取负并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x75")]),t._v(" "),a("td",[t._v("lneg")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值取负并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x76")]),t._v(" "),a("td",[t._v("fneg")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值取负并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x77")]),t._v(" "),a("td",[t._v("dneg")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值取负并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x78")]),t._v(" "),a("td",[t._v("ishl")]),t._v(" "),a("td",[t._v("将 int 型数值左移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x79")]),t._v(" "),a("td",[t._v("lshl")]),t._v(" "),a("td",[t._v("将 long 型数值左移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7a")]),t._v(" "),a("td",[t._v("ishr")]),t._v(" "),a("td",[t._v("将 int 型数值右（符号）移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7b")]),t._v(" "),a("td",[t._v("lshr")]),t._v(" "),a("td",[t._v("将 long 型数值右（符号）移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7c")]),t._v(" "),a("td",[t._v("iushr")]),t._v(" "),a("td",[t._v("将 int 型数值右（无符号）移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7d")]),t._v(" "),a("td",[t._v("lushr")]),t._v(" "),a("td",[t._v("将 long 型数值右（无符号）移位指定位数并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7e")]),t._v(" "),a("td",[t._v("iand")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值作“按位与”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x7f")]),t._v(" "),a("td",[t._v("land")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值作“按位与”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x80")]),t._v(" "),a("td",[t._v("ior")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值作“按位或”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x81")]),t._v(" "),a("td",[t._v("lor")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值作“按位或”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x82")]),t._v(" "),a("td",[t._v("ixor")]),t._v(" "),a("td",[t._v("将栈顶两 int 型数值作“按位异或”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x83")]),t._v(" "),a("td",[t._v("lxor")]),t._v(" "),a("td",[t._v("将栈顶两 long 型数值作“按位异或”并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x84")]),t._v(" "),a("td",[t._v("iinc")]),t._v(" "),a("td",[t._v("将指定 int 型变量增加指定值（i++,")])]),t._v(" "),a("tr",[a("td",[t._v("0x85")]),t._v(" "),a("td",[t._v("i2l")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 long 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x86")]),t._v(" "),a("td",[t._v("i2f")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 float 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x87")]),t._v(" "),a("td",[t._v("i2d")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 double 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x88")]),t._v(" "),a("td",[t._v("l2i")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值强制转换成 int 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x89")]),t._v(" "),a("td",[t._v("l2f")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值强制转换成 float 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8a")]),t._v(" "),a("td",[t._v("l2d")]),t._v(" "),a("td",[t._v("将栈顶 long 型数值强制转换成 double 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8b")]),t._v(" "),a("td",[t._v("f2i")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值强制转换成 int 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8c")]),t._v(" "),a("td",[t._v("f2l")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值强制转换成 long 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8d")]),t._v(" "),a("td",[t._v("f2d")]),t._v(" "),a("td",[t._v("将栈顶 float 型数值强制转换成 double 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8e")]),t._v(" "),a("td",[t._v("d2i")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值强制转换成 int 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x8f")]),t._v(" "),a("td",[t._v("d2l")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值强制转换成 long 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x90")]),t._v(" "),a("td",[t._v("d2f")]),t._v(" "),a("td",[t._v("将栈顶 double 型数值强制转换成 float 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x91")]),t._v(" "),a("td",[t._v("i2b")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 byte 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x92")]),t._v(" "),a("td",[t._v("i2c")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 char 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x93")]),t._v(" "),a("td",[t._v("i2s")]),t._v(" "),a("td",[t._v("将栈顶 int 型数值强制转换成 short 型数值并将结果压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x94")]),t._v(" "),a("td",[t._v("lcmp")]),t._v(" "),a("td",[t._v("比较栈顶两 long 型数值大小，并将结果（1，0，-1）压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x95")]),t._v(" "),a("td",[t._v("fcmpl")]),t._v(" "),a("td",[t._v("比较栈顶两 float 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为 NaN 时，将 -1 压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x96")]),t._v(" "),a("td",[t._v("fcmpg")]),t._v(" "),a("td",[t._v("比较栈顶两 float 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为 NaN 时，将 1 压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x97")]),t._v(" "),a("td",[t._v("dcmpl")]),t._v(" "),a("td",[t._v("比较栈顶两 double 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为 NaN 时，将 -1 压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x98")]),t._v(" "),a("td",[t._v("dcmpg")]),t._v(" "),a("td",[t._v("比较栈顶两 double 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为 NaN 时，将 1 压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0x99")]),t._v(" "),a("td",[t._v("ifeq")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9a")]),t._v(" "),a("td",[t._v("ifne")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值不等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9b")]),t._v(" "),a("td",[t._v("iflt")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值小于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9c")]),t._v(" "),a("td",[t._v("ifge")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值大于等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9d")]),t._v(" "),a("td",[t._v("ifgt")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值大于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9e")]),t._v(" "),a("td",[t._v("ifle")]),t._v(" "),a("td",[t._v("当栈顶 int 型数值小于等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0x9f")]),t._v(" "),a("td",[t._v("if_icmpeq")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa0")]),t._v(" "),a("td",[t._v("if_icmpne")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果不等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa1")]),t._v(" "),a("td",[t._v("if_icmplt")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果小于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa2")]),t._v(" "),a("td",[t._v("if_icmpge")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果大于等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa3")]),t._v(" "),a("td",[t._v("if_icmpgt")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果大于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa4")]),t._v(" "),a("td",[t._v("if_icmple")]),t._v(" "),a("td",[t._v("比较栈顶两 int 型数值大小，当结果小于等于 0 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa5")]),t._v(" "),a("td",[t._v("if_acmpeq")]),t._v(" "),a("td",[t._v("比较栈顶两引用型数值，当结果相等时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa6")]),t._v(" "),a("td",[t._v("if_acmpne")]),t._v(" "),a("td",[t._v("比较栈顶两引用型数值，当结果不相等时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa7")]),t._v(" "),a("td",[t._v("goto")]),t._v(" "),a("td",[t._v("无条件跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xa8")]),t._v(" "),a("td",[t._v("jsr")]),t._v(" "),a("td",[t._v("跳转至指定 16 位 offset 位置，并将 jsr 下一条指令地址压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xa9")]),t._v(" "),a("td",[t._v("ret")]),t._v(" "),a("td",[t._v("返回至本地变量指定的 index 的指令位置（一般与 jsr, jsr_w 联合使用）")])]),t._v(" "),a("tr",[a("td",[t._v("0xaa")]),t._v(" "),a("td",[t._v("tableswitch")]),t._v(" "),a("td",[t._v("用于 switch 条件跳转，case 值连续（可变长度指令）")])]),t._v(" "),a("tr",[a("td",[t._v("0xab")]),t._v(" "),a("td",[t._v("lookupswitch")]),t._v(" "),a("td",[t._v("用于 switch 条件跳转，case 值不连续（可变长度指令）")])]),t._v(" "),a("tr",[a("td",[t._v("0xac")]),t._v(" "),a("td",[t._v("ireturn")]),t._v(" "),a("td",[t._v("从当前方法返回 int")])]),t._v(" "),a("tr",[a("td",[t._v("0xad")]),t._v(" "),a("td",[t._v("lreturn")]),t._v(" "),a("td",[t._v("从当前方法返回 long")])]),t._v(" "),a("tr",[a("td",[t._v("0xae")]),t._v(" "),a("td",[t._v("freturn")]),t._v(" "),a("td",[t._v("从当前方法返回 float")])]),t._v(" "),a("tr",[a("td",[t._v("0xaf")]),t._v(" "),a("td",[t._v("dreturn")]),t._v(" "),a("td",[t._v("从当前方法返回 double")])]),t._v(" "),a("tr",[a("td",[t._v("0xb0")]),t._v(" "),a("td",[t._v("areturn")]),t._v(" "),a("td",[t._v("从当前方法返回对象引用")])]),t._v(" "),a("tr",[a("td",[t._v("0xb1")]),t._v(" "),a("td",[t._v("return")]),t._v(" "),a("td",[t._v("从当前方法返回void")])]),t._v(" "),a("tr",[a("td",[t._v("0xb2")]),t._v(" "),a("td",[t._v("getstatic")]),t._v(" "),a("td",[t._v("获取指定类的静态域，并将其值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xb3")]),t._v(" "),a("td",[t._v("putstatic")]),t._v(" "),a("td",[t._v("为指定的类的静态域赋值")])]),t._v(" "),a("tr",[a("td",[t._v("0xb4")]),t._v(" "),a("td",[t._v("getfield")]),t._v(" "),a("td",[t._v("获取指定类的实例域，并将其值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xb5")]),t._v(" "),a("td",[t._v("putfield")]),t._v(" "),a("td",[t._v("为指定的类的实例域赋值")])]),t._v(" "),a("tr",[a("td",[t._v("0xb6")]),t._v(" "),a("td",[t._v("invokevirtual")]),t._v(" "),a("td",[t._v("调用实例方法")])]),t._v(" "),a("tr",[a("td",[t._v("0xb7")]),t._v(" "),a("td",[t._v("invokespecial")]),t._v(" "),a("td",[t._v("调用超类构造方法，实例初始化方法，私有方法")])]),t._v(" "),a("tr",[a("td",[t._v("0xb8")]),t._v(" "),a("td",[t._v("invokestatic")]),t._v(" "),a("td",[t._v("调用静态方法")])]),t._v(" "),a("tr",[a("td",[t._v("0xb9")]),t._v(" "),a("td",[t._v("invokeinterface")]),t._v(" "),a("td",[t._v("调用接口方法")])]),t._v(" "),a("tr",[a("td",[t._v("0xba")]),t._v(" "),a("td",[t._v("–")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("0xbb")]),t._v(" "),a("td",[t._v("new")]),t._v(" "),a("td",[t._v("创建一个对象，并将其引用值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xbc")]),t._v(" "),a("td",[t._v("newarray")]),t._v(" "),a("td",[t._v("创建一个指定原始类型（如int, float, char…）的数组，并将其引用值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xbd")]),t._v(" "),a("td",[t._v("anewarray")]),t._v(" "),a("td",[t._v("创建一个引用型（如类，接口，数组）的数组，并将其引用值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xbe")]),t._v(" "),a("td",[t._v("arraylength")]),t._v(" "),a("td",[t._v("获得数组的长度值并压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xbf")]),t._v(" "),a("td",[t._v("athrow")]),t._v(" "),a("td",[t._v("将栈顶的异常抛出")])]),t._v(" "),a("tr",[a("td",[t._v("0xc0")]),t._v(" "),a("td",[t._v("checkcast")]),t._v(" "),a("td",[t._v("检验类型转换，检验未通过将抛出 ClassCastException")])]),t._v(" "),a("tr",[a("td",[t._v("0xc1")]),t._v(" "),a("td",[t._v("instanceof")]),t._v(" "),a("td",[t._v("检验对象是否是指定的类的实例，如果是将 1 压入栈顶，否则将0压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xc2")]),t._v(" "),a("td",[t._v("monitorenter")]),t._v(" "),a("td",[t._v("获得对象的锁，用于同步方法或同步块")])]),t._v(" "),a("tr",[a("td",[t._v("0xc3")]),t._v(" "),a("td",[t._v("monitorexit")]),t._v(" "),a("td",[t._v("释放对象的锁，用于同步方法或同步块")])]),t._v(" "),a("tr",[a("td",[t._v("0xc4")]),t._v(" "),a("td",[t._v("wide")]),t._v(" "),a("td",[t._v("<待补充>")])]),t._v(" "),a("tr",[a("td",[t._v("0xc5")]),t._v(" "),a("td",[t._v("multianewarray")]),t._v(" "),a("td",[t._v("创建指定类型和指定维度的多维数组（执行该指令时，操作栈中必须包含各维度的长度值），并将其引用值压入栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("0xc6")]),t._v(" "),a("td",[t._v("ifnull")]),t._v(" "),a("td",[t._v("为 null 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xc7")]),t._v(" "),a("td",[t._v("ifnonnull")]),t._v(" "),a("td",[t._v("不为 null 时跳转")])]),t._v(" "),a("tr",[a("td",[t._v("0xc8")]),t._v(" "),a("td",[t._v("goto_w")]),t._v(" "),a("td",[t._v("无条件跳转（宽索引）")])]),t._v(" "),a("tr",[a("td",[t._v("0xc9")]),t._v(" "),a("td",[t._v("jsr_w")]),t._v(" "),a("td",[t._v("跳转至指定 32 位 offset 位置，并将 jsr_w 下一条指令地址压入栈顶")])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);